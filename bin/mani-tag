#!/usr/bin/env bash

function requirement()
{
    if ! command -v "$1" &>/dev/null
    then
        echo "Required executable not found: $1"
        exit 1
    fi
}

function help()
{
    # HELP_BEGIN
    echo "USAGE:"
    echo "  mani-tag [OPTIONS]"
    echo
    echo "OPTIONS:"
    echo "  -p project1,project2,...    Select project (default: current directory)"
    echo "  -P                          Select all projects"
    echo "  -a tag1,tag2,...            Add tags to projects"
    echo "  -d tag1,tag2,...            Delete tags from projects"
    echo "  -c                          Clear all tags for projects"
    echo "  -h                          Show this help message"
    # HELP_END
    exit "${1:-0}"
}

# Variables to be used in the script.
root=       # The 'mani' root containing the 'mani.yaml' file.
config=     # Full path of the 'mani.yaml' file.
relative=   # Relative path of the current directory to the 'mani' root.
projects=() # Project to add/delete/create tags for.
selector=   # Multiple path selector for yq
add=        # Tags to add.
delete=     # Tags to delete.
clr=        # Clear all tags flag.
all=        # Flag to select all projects.

# Parse arguments
[[ "$#" -eq 0 ]] && help 1

while getopts "p:Pa:d:ch" flag
do
    case "$flag" in
        "p") IFS=',' read -ra projects <<< "$OPTARG";;
        "P") all=1;;
        "a") add="[\"${OPTARG//,/\",\"}\"]";;
        "d") delete="[\"${OPTARG//,/\",\"}\"]";;
        "c") clr=1;;
        "h") help 0;;
        *) help 1;;
    esac
done

# Check for required executables.
requirement flock
requirement yq

function find_root()
{
    # Find 'mani' root.
    pushd "$1" &>/dev/null || return 1
    while ! [[ -f mani.yaml ]]
    do
        if [[ "$PWD" == "/" ]]
        then
            echo "No 'mani.yaml' found."
            exit 1
        fi
        cd ..
    done
    root="$PWD"
    echo "$root"
    popd &>/dev/null || return 1
}
export -f find_root

function main()
{
    # Set root.
    root="$1"
    # Set config file.
    config="$root/mani.yaml"
    lock="$config.lock"

    # Set relative path compare to 'mani' root.
    [[ "$root" != "$PWD" ]] && relative=${PWD//$root\//}

    if [[ -n "$all" ]]
    then
        selector=".projects.*.tags"
    else
        # Find project based on 'mani.yaml' and relative path.
        if [[ "${#projects[@]}" -eq 0 ]]
        then
            project="$(flock "$lock" command yq ".projects | to_entries | .[] | select(.value.path == \"$relative\") | .key" "$config")"
            if [[ -n "$project" ]]
            then
                projects=( "$project" )
            else
                findname="$(flock "$lock" command yq ".projects | has(\"$relative\")" "$config")"
                notfindpath="$(flock "$lock" command yq ".projects.\"$relative\".path == null" "$config")"
                if [[ "$findname" == "true" ]] && [[ "$notfindpath" == "true" ]]
                then
                    projects=( "$relative" )
                else
                    echo "No project with name or path '$relative' in '$config'." && return 1
                fi
            fi
        fi

        selector="("
        for project in "${projects[@]}"
        do
            [[ "$(flock "$lock" command yq ".projects.\"$project\"" "$config")" == "null" ]] && echo "No project with name '$project' in '$config'." && return 1
            selector+=".projects.\"$project\".tags, "
        done
        selector="${selector:0:-2})"
    fi

    # Handle arguments
    if [[ -n "$delete" ]]
    then
        flock "$lock" command yq -i "$selector |= (filter([.] - $delete | length > 0) | sort)" "$config"
    fi

    if [[ -n "$add" ]]
    then
        flock "$lock" command yq -i "$selector |= (. + $add | unique | sort)" "$config"
    fi

    if [[ -n "$clr" ]]
    then
        flock "$lock" command yq -i "$selector = []" "$config"
    fi
}

dir="$PWD"
while true
do
    ! root="$(find_root "$dir")" && echo "$root" && exit 1
    main "$root" && exit 0

    # mani.yaml files can be nested inside projects and create
    # name collisions.
    dir="$root/.."
    [[ "$(readlink -f "$dir")" == "/" ]] && exit 1
    echo "Checking in parent directories..."
done
